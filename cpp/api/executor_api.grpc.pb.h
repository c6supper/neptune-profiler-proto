// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api/executor_api.proto
// Original file comments:
// ----------------------------------------------------------------
//  Copyright (c) Coding Nerd
//  Licensed under the Apache License, Version 2.0
//  See LICENSE in the project root for license information.
// ----------------------------------------------------------------
//
#ifndef GRPC_api_2fexecutor_5fapi_2eproto__INCLUDED
#define GRPC_api_2fexecutor_5fapi_2eproto__INCLUDED

#include "api/executor_api.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace netpune {
namespace profiler {
namespace api {

// ExecutorAPI definition
class ExecutorAPI final {
 public:
  static constexpr char const* service_full_name() {
    return "netpune.profiler.api.ExecutorAPI";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Launch remote task
    virtual ::grpc::Status Launch(::grpc::ClientContext* context, const ::netpune::profiler::api::LaunchRequest& request, ::netpune::profiler::api::LaunchResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netpune::profiler::api::LaunchResponse>> AsyncLaunch(::grpc::ClientContext* context, const ::netpune::profiler::api::LaunchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netpune::profiler::api::LaunchResponse>>(AsyncLaunchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netpune::profiler::api::LaunchResponse>> PrepareAsyncLaunch(::grpc::ClientContext* context, const ::netpune::profiler::api::LaunchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netpune::profiler::api::LaunchResponse>>(PrepareAsyncLaunchRaw(context, request, cq));
    }
    // Kill remote session
    virtual ::grpc::Status Kill(::grpc::ClientContext* context, const ::netpune::profiler::api::KillRequest& request, ::netpune::profiler::api::KillResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netpune::profiler::api::KillResponse>> AsyncKill(::grpc::ClientContext* context, const ::netpune::profiler::api::KillRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netpune::profiler::api::KillResponse>>(AsyncKillRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netpune::profiler::api::KillResponse>> PrepareAsyncKill(::grpc::ClientContext* context, const ::netpune::profiler::api::KillRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netpune::profiler::api::KillResponse>>(PrepareAsyncKillRaw(context, request, cq));
    }
    // List remote sessions
    virtual ::grpc::Status List(::grpc::ClientContext* context, const ::netpune::profiler::api::ListRequest& request, ::netpune::profiler::api::ListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netpune::profiler::api::ListResponse>> AsyncList(::grpc::ClientContext* context, const ::netpune::profiler::api::ListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netpune::profiler::api::ListResponse>>(AsyncListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netpune::profiler::api::ListResponse>> PrepareAsyncList(::grpc::ClientContext* context, const ::netpune::profiler::api::ListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netpune::profiler::api::ListResponse>>(PrepareAsyncListRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Launch remote task
      virtual void Launch(::grpc::ClientContext* context, const ::netpune::profiler::api::LaunchRequest* request, ::netpune::profiler::api::LaunchResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Launch(::grpc::ClientContext* context, const ::netpune::profiler::api::LaunchRequest* request, ::netpune::profiler::api::LaunchResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Launch(::grpc::ClientContext* context, const ::netpune::profiler::api::LaunchRequest* request, ::netpune::profiler::api::LaunchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Kill remote session
      virtual void Kill(::grpc::ClientContext* context, const ::netpune::profiler::api::KillRequest* request, ::netpune::profiler::api::KillResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Kill(::grpc::ClientContext* context, const ::netpune::profiler::api::KillRequest* request, ::netpune::profiler::api::KillResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Kill(::grpc::ClientContext* context, const ::netpune::profiler::api::KillRequest* request, ::netpune::profiler::api::KillResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // List remote sessions
      virtual void List(::grpc::ClientContext* context, const ::netpune::profiler::api::ListRequest* request, ::netpune::profiler::api::ListResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void List(::grpc::ClientContext* context, const ::netpune::profiler::api::ListRequest* request, ::netpune::profiler::api::ListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void List(::grpc::ClientContext* context, const ::netpune::profiler::api::ListRequest* request, ::netpune::profiler::api::ListResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::netpune::profiler::api::LaunchResponse>* AsyncLaunchRaw(::grpc::ClientContext* context, const ::netpune::profiler::api::LaunchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::netpune::profiler::api::LaunchResponse>* PrepareAsyncLaunchRaw(::grpc::ClientContext* context, const ::netpune::profiler::api::LaunchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::netpune::profiler::api::KillResponse>* AsyncKillRaw(::grpc::ClientContext* context, const ::netpune::profiler::api::KillRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::netpune::profiler::api::KillResponse>* PrepareAsyncKillRaw(::grpc::ClientContext* context, const ::netpune::profiler::api::KillRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::netpune::profiler::api::ListResponse>* AsyncListRaw(::grpc::ClientContext* context, const ::netpune::profiler::api::ListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::netpune::profiler::api::ListResponse>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::netpune::profiler::api::ListRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Launch(::grpc::ClientContext* context, const ::netpune::profiler::api::LaunchRequest& request, ::netpune::profiler::api::LaunchResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netpune::profiler::api::LaunchResponse>> AsyncLaunch(::grpc::ClientContext* context, const ::netpune::profiler::api::LaunchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netpune::profiler::api::LaunchResponse>>(AsyncLaunchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netpune::profiler::api::LaunchResponse>> PrepareAsyncLaunch(::grpc::ClientContext* context, const ::netpune::profiler::api::LaunchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netpune::profiler::api::LaunchResponse>>(PrepareAsyncLaunchRaw(context, request, cq));
    }
    ::grpc::Status Kill(::grpc::ClientContext* context, const ::netpune::profiler::api::KillRequest& request, ::netpune::profiler::api::KillResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netpune::profiler::api::KillResponse>> AsyncKill(::grpc::ClientContext* context, const ::netpune::profiler::api::KillRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netpune::profiler::api::KillResponse>>(AsyncKillRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netpune::profiler::api::KillResponse>> PrepareAsyncKill(::grpc::ClientContext* context, const ::netpune::profiler::api::KillRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netpune::profiler::api::KillResponse>>(PrepareAsyncKillRaw(context, request, cq));
    }
    ::grpc::Status List(::grpc::ClientContext* context, const ::netpune::profiler::api::ListRequest& request, ::netpune::profiler::api::ListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netpune::profiler::api::ListResponse>> AsyncList(::grpc::ClientContext* context, const ::netpune::profiler::api::ListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netpune::profiler::api::ListResponse>>(AsyncListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netpune::profiler::api::ListResponse>> PrepareAsyncList(::grpc::ClientContext* context, const ::netpune::profiler::api::ListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netpune::profiler::api::ListResponse>>(PrepareAsyncListRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Launch(::grpc::ClientContext* context, const ::netpune::profiler::api::LaunchRequest* request, ::netpune::profiler::api::LaunchResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Launch(::grpc::ClientContext* context, const ::netpune::profiler::api::LaunchRequest* request, ::netpune::profiler::api::LaunchResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Launch(::grpc::ClientContext* context, const ::netpune::profiler::api::LaunchRequest* request, ::netpune::profiler::api::LaunchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Kill(::grpc::ClientContext* context, const ::netpune::profiler::api::KillRequest* request, ::netpune::profiler::api::KillResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Kill(::grpc::ClientContext* context, const ::netpune::profiler::api::KillRequest* request, ::netpune::profiler::api::KillResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Kill(::grpc::ClientContext* context, const ::netpune::profiler::api::KillRequest* request, ::netpune::profiler::api::KillResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void List(::grpc::ClientContext* context, const ::netpune::profiler::api::ListRequest* request, ::netpune::profiler::api::ListResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void List(::grpc::ClientContext* context, const ::netpune::profiler::api::ListRequest* request, ::netpune::profiler::api::ListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void List(::grpc::ClientContext* context, const ::netpune::profiler::api::ListRequest* request, ::netpune::profiler::api::ListResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::netpune::profiler::api::LaunchResponse>* AsyncLaunchRaw(::grpc::ClientContext* context, const ::netpune::profiler::api::LaunchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::netpune::profiler::api::LaunchResponse>* PrepareAsyncLaunchRaw(::grpc::ClientContext* context, const ::netpune::profiler::api::LaunchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::netpune::profiler::api::KillResponse>* AsyncKillRaw(::grpc::ClientContext* context, const ::netpune::profiler::api::KillRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::netpune::profiler::api::KillResponse>* PrepareAsyncKillRaw(::grpc::ClientContext* context, const ::netpune::profiler::api::KillRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::netpune::profiler::api::ListResponse>* AsyncListRaw(::grpc::ClientContext* context, const ::netpune::profiler::api::ListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::netpune::profiler::api::ListResponse>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::netpune::profiler::api::ListRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Launch_;
    const ::grpc::internal::RpcMethod rpcmethod_Kill_;
    const ::grpc::internal::RpcMethod rpcmethod_List_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Launch remote task
    virtual ::grpc::Status Launch(::grpc::ServerContext* context, const ::netpune::profiler::api::LaunchRequest* request, ::netpune::profiler::api::LaunchResponse* response);
    // Kill remote session
    virtual ::grpc::Status Kill(::grpc::ServerContext* context, const ::netpune::profiler::api::KillRequest* request, ::netpune::profiler::api::KillResponse* response);
    // List remote sessions
    virtual ::grpc::Status List(::grpc::ServerContext* context, const ::netpune::profiler::api::ListRequest* request, ::netpune::profiler::api::ListResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Launch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Launch() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Launch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Launch(::grpc::ServerContext* /*context*/, const ::netpune::profiler::api::LaunchRequest* /*request*/, ::netpune::profiler::api::LaunchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLaunch(::grpc::ServerContext* context, ::netpune::profiler::api::LaunchRequest* request, ::grpc::ServerAsyncResponseWriter< ::netpune::profiler::api::LaunchResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Kill : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Kill() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Kill() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Kill(::grpc::ServerContext* /*context*/, const ::netpune::profiler::api::KillRequest* /*request*/, ::netpune::profiler::api::KillResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKill(::grpc::ServerContext* context, ::netpune::profiler::api::KillRequest* request, ::grpc::ServerAsyncResponseWriter< ::netpune::profiler::api::KillResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_List() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::netpune::profiler::api::ListRequest* /*request*/, ::netpune::profiler::api::ListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::netpune::profiler::api::ListRequest* request, ::grpc::ServerAsyncResponseWriter< ::netpune::profiler::api::ListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Launch<WithAsyncMethod_Kill<WithAsyncMethod_List<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Launch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Launch() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::netpune::profiler::api::LaunchRequest, ::netpune::profiler::api::LaunchResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::netpune::profiler::api::LaunchRequest* request, ::netpune::profiler::api::LaunchResponse* response) { return this->Launch(context, request, response); }));}
    void SetMessageAllocatorFor_Launch(
        ::grpc::experimental::MessageAllocator< ::netpune::profiler::api::LaunchRequest, ::netpune::profiler::api::LaunchResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::netpune::profiler::api::LaunchRequest, ::netpune::profiler::api::LaunchResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Launch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Launch(::grpc::ServerContext* /*context*/, const ::netpune::profiler::api::LaunchRequest* /*request*/, ::netpune::profiler::api::LaunchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Launch(
      ::grpc::CallbackServerContext* /*context*/, const ::netpune::profiler::api::LaunchRequest* /*request*/, ::netpune::profiler::api::LaunchResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Launch(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::netpune::profiler::api::LaunchRequest* /*request*/, ::netpune::profiler::api::LaunchResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Kill : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Kill() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::netpune::profiler::api::KillRequest, ::netpune::profiler::api::KillResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::netpune::profiler::api::KillRequest* request, ::netpune::profiler::api::KillResponse* response) { return this->Kill(context, request, response); }));}
    void SetMessageAllocatorFor_Kill(
        ::grpc::experimental::MessageAllocator< ::netpune::profiler::api::KillRequest, ::netpune::profiler::api::KillResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::netpune::profiler::api::KillRequest, ::netpune::profiler::api::KillResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Kill() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Kill(::grpc::ServerContext* /*context*/, const ::netpune::profiler::api::KillRequest* /*request*/, ::netpune::profiler::api::KillResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Kill(
      ::grpc::CallbackServerContext* /*context*/, const ::netpune::profiler::api::KillRequest* /*request*/, ::netpune::profiler::api::KillResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Kill(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::netpune::profiler::api::KillRequest* /*request*/, ::netpune::profiler::api::KillResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_List() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::netpune::profiler::api::ListRequest, ::netpune::profiler::api::ListResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::netpune::profiler::api::ListRequest* request, ::netpune::profiler::api::ListResponse* response) { return this->List(context, request, response); }));}
    void SetMessageAllocatorFor_List(
        ::grpc::experimental::MessageAllocator< ::netpune::profiler::api::ListRequest, ::netpune::profiler::api::ListResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::netpune::profiler::api::ListRequest, ::netpune::profiler::api::ListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::netpune::profiler::api::ListRequest* /*request*/, ::netpune::profiler::api::ListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* List(
      ::grpc::CallbackServerContext* /*context*/, const ::netpune::profiler::api::ListRequest* /*request*/, ::netpune::profiler::api::ListResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* List(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::netpune::profiler::api::ListRequest* /*request*/, ::netpune::profiler::api::ListResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Launch<ExperimentalWithCallbackMethod_Kill<ExperimentalWithCallbackMethod_List<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Launch<ExperimentalWithCallbackMethod_Kill<ExperimentalWithCallbackMethod_List<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Launch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Launch() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Launch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Launch(::grpc::ServerContext* /*context*/, const ::netpune::profiler::api::LaunchRequest* /*request*/, ::netpune::profiler::api::LaunchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Kill : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Kill() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Kill() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Kill(::grpc::ServerContext* /*context*/, const ::netpune::profiler::api::KillRequest* /*request*/, ::netpune::profiler::api::KillResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_List() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::netpune::profiler::api::ListRequest* /*request*/, ::netpune::profiler::api::ListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Launch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Launch() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Launch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Launch(::grpc::ServerContext* /*context*/, const ::netpune::profiler::api::LaunchRequest* /*request*/, ::netpune::profiler::api::LaunchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLaunch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Kill : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Kill() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Kill() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Kill(::grpc::ServerContext* /*context*/, const ::netpune::profiler::api::KillRequest* /*request*/, ::netpune::profiler::api::KillResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKill(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_List() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::netpune::profiler::api::ListRequest* /*request*/, ::netpune::profiler::api::ListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Launch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Launch() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Launch(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Launch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Launch(::grpc::ServerContext* /*context*/, const ::netpune::profiler::api::LaunchRequest* /*request*/, ::netpune::profiler::api::LaunchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Launch(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Launch(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Kill : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Kill() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Kill(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Kill() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Kill(::grpc::ServerContext* /*context*/, const ::netpune::profiler::api::KillRequest* /*request*/, ::netpune::profiler::api::KillResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Kill(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Kill(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_List() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->List(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::netpune::profiler::api::ListRequest* /*request*/, ::netpune::profiler::api::ListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* List(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* List(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Launch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Launch() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::netpune::profiler::api::LaunchRequest, ::netpune::profiler::api::LaunchResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::netpune::profiler::api::LaunchRequest, ::netpune::profiler::api::LaunchResponse>* streamer) {
                       return this->StreamedLaunch(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Launch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Launch(::grpc::ServerContext* /*context*/, const ::netpune::profiler::api::LaunchRequest* /*request*/, ::netpune::profiler::api::LaunchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLaunch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::netpune::profiler::api::LaunchRequest,::netpune::profiler::api::LaunchResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Kill : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Kill() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::netpune::profiler::api::KillRequest, ::netpune::profiler::api::KillResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::netpune::profiler::api::KillRequest, ::netpune::profiler::api::KillResponse>* streamer) {
                       return this->StreamedKill(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Kill() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Kill(::grpc::ServerContext* /*context*/, const ::netpune::profiler::api::KillRequest* /*request*/, ::netpune::profiler::api::KillResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedKill(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::netpune::profiler::api::KillRequest,::netpune::profiler::api::KillResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_List() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::netpune::profiler::api::ListRequest, ::netpune::profiler::api::ListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::netpune::profiler::api::ListRequest, ::netpune::profiler::api::ListResponse>* streamer) {
                       return this->StreamedList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::netpune::profiler::api::ListRequest* /*request*/, ::netpune::profiler::api::ListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::netpune::profiler::api::ListRequest,::netpune::profiler::api::ListResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Launch<WithStreamedUnaryMethod_Kill<WithStreamedUnaryMethod_List<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Launch<WithStreamedUnaryMethod_Kill<WithStreamedUnaryMethod_List<Service > > > StreamedService;
};

}  // namespace api
}  // namespace profiler
}  // namespace netpune


#endif  // GRPC_api_2fexecutor_5fapi_2eproto__INCLUDED
